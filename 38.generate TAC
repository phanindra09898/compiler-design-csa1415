#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>

#define MAX 100
#define NUM_VARS 26

void generateThreeAddressCode(char* expression);
char tempVar[NUM_VARS] = {'t'};  
int tempCount = 1;  

int precedence(char op) {
    if (op == '+' || op == '-') {
        return 1;
    } else if (op == '*' || op == '/') {
        return 2;
    } else if (op == '^') {
        return 3;  // Exponentiation has higher precedence
    }
    return 0;
}

// Function to generate the three-address code
void generateThreeAddressCode(char* expression) {
    char operators[MAX];
    int opTop = -1;
    char stack[MAX];
    int top = -1;
    int length = strlen(expression);

    for (int i = 0; i < length; i++) {
        if (isspace(expression[i])) {
            continue;
        }

        if (isalnum(expression[i])) {  // If it's an operand (e.g., a variable or number)
            stack[++top] = expression[i];
        } else if (expression[i] == '(') {  // Left Parenthesis
            operators[++opTop] = expression[i];
        } else if (expression[i] == ')') {  // Right Parenthesis
            while (opTop >= 0 && operators[opTop] != '(') {
                char operator = operators[opTop--];
                char operand2 = stack[top--];
                char operand1 = stack[top--];
                char tempVarName = tempVar[tempCount++];
                printf("%c = %c %c %c\n", tempVarName, operand1, operator, operand2);
                stack[++top] = tempVarName;
            }
            opTop--;  // Remove '(' from stack
        } else if (strchr("+-*/^", expression[i]) != NULL) {  // If it's an operator
            while (opTop >= 0 && precedence(operators[opTop]) >= precedence(expression[i])) {
                char operator = operators[opTop--];
                char operand2 = stack[top--];
                char operand1 = stack[top--];
                char tempVarName = tempVar[tempCount++];
                printf("%c = %c %c %c\n", tempVarName, operand1, operator, operand2);
                stack[++top] = tempVarName;
            }
            operators[++opTop] = expression[i];
        }
    }

    // Process remaining operators
    while (opTop >= 0) {
        char operator = operators[opTop--];
        char operand2 = stack[top--];
        char operand1 = stack[top--];
        char tempVarName = tempVar[tempCount++];
        printf("%c = %c %c %c\n", tempVarName, operand1, operator, operand2);
        stack[++top] = tempVarName;
    }

    if (top == 0) {
        printf("Result = %c\n", stack[top]);
    } else {
        printf("Error: Invalid expression\n");
    }
}

int main() {
    char expression[MAX];
    printf("Enter the expression: ");
    fgets(expression, MAX, stdin);
    expression[strcspn(expression, "\n")] = '\0';  // Remove newline character
    generateThreeAddressCode(expression);
    return 0;
}
