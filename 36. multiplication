#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <math.h>
#define MAX 100

typedef struct {
    double values[MAX];
    char operators[MAX];
    int top_values;
    int top_operators;
} Stack;

void initStack(Stack* stack) {
    stack->top_values = -1;
    stack->top_operators = -1;
}

void pushValue(Stack* stack, double value) {
    stack->values[++(stack->top_values)] = value;
}

void pushOperator(Stack* stack, char operator) {
    stack->operators[++(stack->top_operators)] = operator;
}

double popValue(Stack* stack) {
    return stack->values[(stack->top_values)--];
}

char popOperator(Stack* stack) {
    return stack->operators[(stack->top_operators)--];
}

int precedence(char operator) {
    if (operator == '+' || operator == '-') {
        return 1;
    } else if (operator == '*' || operator == '/') {
        return 2;
    } else if (operator == '^') {
        return 3; 
    }
    return 0;  
}

double applyOperator(double a, double b, char operator) {
    switch (operator) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/': return a / b;
        case '^': return pow(a, b);
        default: return 0;
    }
}

double evaluateExpression(char* expression) {
    Stack stack;
    initStack(&stack);
    int i = 0;
    
    while (expression[i] != '\0') {
        // Skip spaces
        if (expression[i] == ' ') {
            i++;
            continue;
        }

        // If digit, parse the full number (handles multi-digit numbers)
        if (isdigit(expression[i])) {
            double value = 0;
            while (isdigit(expression[i])) {
                value = value * 10 + (expression[i] - '0');
                i++;
            }
            // Handle decimal point if there is one
            if (expression[i] == '.') {
                i++;
                double decimalPlace = 1;
                while (isdigit(expression[i])) {
                    value = value + (expression[i] - '0') * (decimalPlace *= 0.1);
                    i++;
                }
            }
            pushValue(&stack, value);
        }
        // If opening parenthesis
        else if (expression[i] == '(') {
            pushOperator(&stack, '(');
            i++;
        }
        // If closing parenthesis
        else if (expression[i] == ')') {
            while (stack.operators[stack.top_operators] != '(') {
                double b = popValue(&stack);
                double a = popValue(&stack);
                char operator = popOperator(&stack);
                pushValue(&stack, applyOperator(a, b, operator));
            }
            popOperator(&stack);  // Pop '('
            i++;
        }
        // If operator (+, -, *, /, ^)
        else if (expression[i] == '+' || expression[i] == '-' || expression[i] == '*' || expression[i] == '/' || expression[i] == '^') {
            while (stack.top_operators != -1 && precedence(stack.operators[stack.top_operators]) >= precedence(expression[i])) {
                double b = popValue(&stack);
                double a = popValue(&stack);
                char operator = popOperator(&stack);
                pushValue(&stack, applyOperator(a, b, operator));
            }
            pushOperator(&stack, expression[i]);
            i++;
        } else {
            i++;  // Ignore any unexpected characters
        }
    }

    // Process remaining operators
    while (stack.top_operators != -1) {
        double b = popValue(&stack);
        double a = popValue(&stack);
        char operator = popOperator(&stack);
        pushValue(&stack, applyOperator(a, b, operator));
    }
    
    return popValue(&stack);
}

int main() {
    char expression[MAX];
    printf("Enter the expression to evaluate: ");
    fgets(expression, sizeof(expression), stdin);
    
    // Removing the newline character from fgets input
    expression[strcspn(expression, "\n")] = 0;

    double result = evaluateExpression(expression);
    printf("The result of the expression is: %.2lf\n", result);
    return 0;
}
